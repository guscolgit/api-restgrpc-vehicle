// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: handlergrpc.proto

#include "handlergrpc.pb.h"
#include "handlergrpc.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace handlergrpc {

class MockHandlerGRPCStub : public HandlerGRPC::StubInterface {
 public:
  MOCK_METHOD3(sendRequestInsert, ::grpc::Status(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response));
  MOCK_METHOD3(AsyncsendRequestInsertRaw, ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>*(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncsendRequestInsertRaw, ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>*(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(sendRequestGetByID, ::grpc::Status(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReplyGetByID* response));
  MOCK_METHOD3(AsyncsendRequestGetByIDRaw, ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByID>*(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncsendRequestGetByIDRaw, ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByID>*(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(sendRequestLocation, ::grpc::Status(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response));
  MOCK_METHOD3(AsyncsendRequestLocationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>*(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncsendRequestLocationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>*(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(sendRequestGetByArea, ::grpc::Status(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReplyGetByArea* response));
  MOCK_METHOD3(AsyncsendRequestGetByAreaRaw, ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByArea>*(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncsendRequestGetByAreaRaw, ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByArea>*(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(sendRequestDelete, ::grpc::Status(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response));
  MOCK_METHOD3(AsyncsendRequestDeleteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>*(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncsendRequestDeleteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>*(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq));
};

} // namespace handlergrpc

