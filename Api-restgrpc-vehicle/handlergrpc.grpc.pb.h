// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: handlergrpc.proto
#ifndef GRPC_handlergrpc_2eproto__INCLUDED
#define GRPC_handlergrpc_2eproto__INCLUDED

#include "handlergrpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace handlergrpc {

// Defines the service
class HandlerGRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "handlergrpc.HandlerGRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Function invoked to send the request
    virtual ::grpc::Status sendRequestInsert(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>> AsyncsendRequestInsert(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>>(AsyncsendRequestInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>> PrepareAsyncsendRequestInsert(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>>(PrepareAsyncsendRequestInsertRaw(context, request, cq));
    }
    // 	option (google.api.http) = { post: "/insert" body: "*" };
    virtual ::grpc::Status sendRequestGetByID(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReplyGetByID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByID>> AsyncsendRequestGetByID(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByID>>(AsyncsendRequestGetByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByID>> PrepareAsyncsendRequestGetByID(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByID>>(PrepareAsyncsendRequestGetByIDRaw(context, request, cq));
    }
    // 	option (google.api.http) = { post: "/vehiclebyid" body: "*" };
    virtual ::grpc::Status sendRequestLocation(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>> AsyncsendRequestLocation(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>>(AsyncsendRequestLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>> PrepareAsyncsendRequestLocation(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>>(PrepareAsyncsendRequestLocationRaw(context, request, cq));
    }
    // 	option (google.api.http) = { post: "/location" body: "*" };
    virtual ::grpc::Status sendRequestGetByArea(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReplyGetByArea* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByArea>> AsyncsendRequestGetByArea(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByArea>>(AsyncsendRequestGetByAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByArea>> PrepareAsyncsendRequestGetByArea(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByArea>>(PrepareAsyncsendRequestGetByAreaRaw(context, request, cq));
    }
    // 	option (google.api.http) = { post: "/vehiclebyarea" body: "*" };
    virtual ::grpc::Status sendRequestDelete(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>> AsyncsendRequestDelete(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>>(AsyncsendRequestDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>> PrepareAsyncsendRequestDelete(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>>(PrepareAsyncsendRequestDeleteRaw(context, request, cq));
    }
    // 	option (google.api.http) = { delete: "/" body: "*" };
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Function invoked to send the request
      virtual void sendRequestInsert(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendRequestInsert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) = 0;
      // 	option (google.api.http) = { post: "/insert" body: "*" };
      virtual void sendRequestGetByID(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendRequestGetByID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReplyGetByID* response, std::function<void(::grpc::Status)>) = 0;
      // 	option (google.api.http) = { post: "/vehiclebyid" body: "*" };
      virtual void sendRequestLocation(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendRequestLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) = 0;
      // 	option (google.api.http) = { post: "/location" body: "*" };
      virtual void sendRequestGetByArea(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendRequestGetByArea(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReplyGetByArea* response, std::function<void(::grpc::Status)>) = 0;
      // 	option (google.api.http) = { post: "/vehiclebyarea" body: "*" };
      virtual void sendRequestDelete(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendRequestDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) = 0;
      // 	option (google.api.http) = { delete: "/" body: "*" };
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>* AsyncsendRequestInsertRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>* PrepareAsyncsendRequestInsertRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByID>* AsyncsendRequestGetByIDRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByID>* PrepareAsyncsendRequestGetByIDRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>* AsyncsendRequestLocationRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>* PrepareAsyncsendRequestLocationRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByArea>* AsyncsendRequestGetByAreaRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReplyGetByArea>* PrepareAsyncsendRequestGetByAreaRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>* AsyncsendRequestDeleteRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handlergrpc::HandlerReply>* PrepareAsyncsendRequestDeleteRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status sendRequestInsert(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>> AsyncsendRequestInsert(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>>(AsyncsendRequestInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>> PrepareAsyncsendRequestInsert(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>>(PrepareAsyncsendRequestInsertRaw(context, request, cq));
    }
    ::grpc::Status sendRequestGetByID(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReplyGetByID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByID>> AsyncsendRequestGetByID(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByID>>(AsyncsendRequestGetByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByID>> PrepareAsyncsendRequestGetByID(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByID>>(PrepareAsyncsendRequestGetByIDRaw(context, request, cq));
    }
    ::grpc::Status sendRequestLocation(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>> AsyncsendRequestLocation(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>>(AsyncsendRequestLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>> PrepareAsyncsendRequestLocation(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>>(PrepareAsyncsendRequestLocationRaw(context, request, cq));
    }
    ::grpc::Status sendRequestGetByArea(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReplyGetByArea* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByArea>> AsyncsendRequestGetByArea(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByArea>>(AsyncsendRequestGetByAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByArea>> PrepareAsyncsendRequestGetByArea(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByArea>>(PrepareAsyncsendRequestGetByAreaRaw(context, request, cq));
    }
    ::grpc::Status sendRequestDelete(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>> AsyncsendRequestDelete(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>>(AsyncsendRequestDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>> PrepareAsyncsendRequestDelete(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>>(PrepareAsyncsendRequestDeleteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void sendRequestInsert(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) override;
      void sendRequestInsert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) override;
      void sendRequestGetByID(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response, std::function<void(::grpc::Status)>) override;
      void sendRequestGetByID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReplyGetByID* response, std::function<void(::grpc::Status)>) override;
      void sendRequestLocation(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) override;
      void sendRequestLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) override;
      void sendRequestGetByArea(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response, std::function<void(::grpc::Status)>) override;
      void sendRequestGetByArea(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReplyGetByArea* response, std::function<void(::grpc::Status)>) override;
      void sendRequestDelete(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) override;
      void sendRequestDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* AsyncsendRequestInsertRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* PrepareAsyncsendRequestInsertRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByID>* AsyncsendRequestGetByIDRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByID>* PrepareAsyncsendRequestGetByIDRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* AsyncsendRequestLocationRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* PrepareAsyncsendRequestLocationRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByArea>* AsyncsendRequestGetByAreaRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByArea>* PrepareAsyncsendRequestGetByAreaRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* AsyncsendRequestDeleteRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* PrepareAsyncsendRequestDeleteRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sendRequestInsert_;
    const ::grpc::internal::RpcMethod rpcmethod_sendRequestGetByID_;
    const ::grpc::internal::RpcMethod rpcmethod_sendRequestLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_sendRequestGetByArea_;
    const ::grpc::internal::RpcMethod rpcmethod_sendRequestDelete_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Function invoked to send the request
    virtual ::grpc::Status sendRequestInsert(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response);
    // 	option (google.api.http) = { post: "/insert" body: "*" };
    virtual ::grpc::Status sendRequestGetByID(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response);
    // 	option (google.api.http) = { post: "/vehiclebyid" body: "*" };
    virtual ::grpc::Status sendRequestLocation(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response);
    // 	option (google.api.http) = { post: "/location" body: "*" };
    virtual ::grpc::Status sendRequestGetByArea(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response);
    // 	option (google.api.http) = { post: "/vehiclebyarea" body: "*" };
    virtual ::grpc::Status sendRequestDelete(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response);
    // 	option (google.api.http) = { delete: "/" body: "*" };
  };
  template <class BaseClass>
  class WithAsyncMethod_sendRequestInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendRequestInsert() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sendRequestInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestInsert(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequestInsert(::grpc::ServerContext* context, ::handlergrpc::HandlerRequest* request, ::grpc::ServerAsyncResponseWriter< ::handlergrpc::HandlerReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendRequestGetByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendRequestGetByID() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_sendRequestGetByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestGetByID(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequestGetByID(::grpc::ServerContext* context, ::handlergrpc::HandlerRequest* request, ::grpc::ServerAsyncResponseWriter< ::handlergrpc::HandlerReplyGetByID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendRequestLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendRequestLocation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_sendRequestLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestLocation(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequestLocation(::grpc::ServerContext* context, ::handlergrpc::HandlerRequest* request, ::grpc::ServerAsyncResponseWriter< ::handlergrpc::HandlerReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendRequestGetByArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendRequestGetByArea() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_sendRequestGetByArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestGetByArea(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequestGetByArea(::grpc::ServerContext* context, ::handlergrpc::HandlerRequest* request, ::grpc::ServerAsyncResponseWriter< ::handlergrpc::HandlerReplyGetByArea>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendRequestDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendRequestDelete() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_sendRequestDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestDelete(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequestDelete(::grpc::ServerContext* context, ::handlergrpc::HandlerRequest* request, ::grpc::ServerAsyncResponseWriter< ::handlergrpc::HandlerReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sendRequestInsert<WithAsyncMethod_sendRequestGetByID<WithAsyncMethod_sendRequestLocation<WithAsyncMethod_sendRequestGetByArea<WithAsyncMethod_sendRequestDelete<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendRequestInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendRequestInsert() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReply>(
          [this](::grpc::ServerContext* context,
                 const ::handlergrpc::HandlerRequest* request,
                 ::handlergrpc::HandlerReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendRequestInsert(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendRequestInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestInsert(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequestInsert(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendRequestGetByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendRequestGetByID() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReplyGetByID>(
          [this](::grpc::ServerContext* context,
                 const ::handlergrpc::HandlerRequest* request,
                 ::handlergrpc::HandlerReplyGetByID* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendRequestGetByID(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendRequestGetByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestGetByID(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequestGetByID(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendRequestLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendRequestLocation() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReply>(
          [this](::grpc::ServerContext* context,
                 const ::handlergrpc::HandlerRequest* request,
                 ::handlergrpc::HandlerReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendRequestLocation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendRequestLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestLocation(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequestLocation(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendRequestGetByArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendRequestGetByArea() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReplyGetByArea>(
          [this](::grpc::ServerContext* context,
                 const ::handlergrpc::HandlerRequest* request,
                 ::handlergrpc::HandlerReplyGetByArea* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendRequestGetByArea(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendRequestGetByArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestGetByArea(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequestGetByArea(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendRequestDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendRequestDelete() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReply>(
          [this](::grpc::ServerContext* context,
                 const ::handlergrpc::HandlerRequest* request,
                 ::handlergrpc::HandlerReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendRequestDelete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendRequestDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestDelete(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequestDelete(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_sendRequestInsert<ExperimentalWithCallbackMethod_sendRequestGetByID<ExperimentalWithCallbackMethod_sendRequestLocation<ExperimentalWithCallbackMethod_sendRequestGetByArea<ExperimentalWithCallbackMethod_sendRequestDelete<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sendRequestInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendRequestInsert() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sendRequestInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestInsert(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendRequestGetByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendRequestGetByID() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_sendRequestGetByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestGetByID(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendRequestLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendRequestLocation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_sendRequestLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestLocation(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendRequestGetByArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendRequestGetByArea() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_sendRequestGetByArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestGetByArea(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendRequestDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendRequestDelete() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_sendRequestDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestDelete(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendRequestInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendRequestInsert() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sendRequestInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestInsert(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequestInsert(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendRequestGetByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendRequestGetByID() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_sendRequestGetByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestGetByID(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequestGetByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendRequestLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendRequestLocation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_sendRequestLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestLocation(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequestLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendRequestGetByArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendRequestGetByArea() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_sendRequestGetByArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestGetByArea(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequestGetByArea(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendRequestDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendRequestDelete() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_sendRequestDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestDelete(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendRequestInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendRequestInsert() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendRequestInsert(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendRequestInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestInsert(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequestInsert(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendRequestGetByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendRequestGetByID() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendRequestGetByID(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendRequestGetByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestGetByID(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequestGetByID(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendRequestLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendRequestLocation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendRequestLocation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendRequestLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestLocation(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequestLocation(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendRequestGetByArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendRequestGetByArea() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendRequestGetByArea(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendRequestGetByArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestGetByArea(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequestGetByArea(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendRequestDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendRequestDelete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendRequestDelete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendRequestDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequestDelete(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequestDelete(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendRequestInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendRequestInsert() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReply>(std::bind(&WithStreamedUnaryMethod_sendRequestInsert<BaseClass>::StreamedsendRequestInsert, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendRequestInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendRequestInsert(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendRequestInsert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handlergrpc::HandlerRequest,::handlergrpc::HandlerReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendRequestGetByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendRequestGetByID() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReplyGetByID>(std::bind(&WithStreamedUnaryMethod_sendRequestGetByID<BaseClass>::StreamedsendRequestGetByID, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendRequestGetByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendRequestGetByID(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendRequestGetByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handlergrpc::HandlerRequest,::handlergrpc::HandlerReplyGetByID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendRequestLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendRequestLocation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReply>(std::bind(&WithStreamedUnaryMethod_sendRequestLocation<BaseClass>::StreamedsendRequestLocation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendRequestLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendRequestLocation(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendRequestLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handlergrpc::HandlerRequest,::handlergrpc::HandlerReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendRequestGetByArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendRequestGetByArea() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReplyGetByArea>(std::bind(&WithStreamedUnaryMethod_sendRequestGetByArea<BaseClass>::StreamedsendRequestGetByArea, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendRequestGetByArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendRequestGetByArea(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendRequestGetByArea(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handlergrpc::HandlerRequest,::handlergrpc::HandlerReplyGetByArea>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendRequestDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendRequestDelete() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReply>(std::bind(&WithStreamedUnaryMethod_sendRequestDelete<BaseClass>::StreamedsendRequestDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendRequestDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendRequestDelete(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendRequestDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handlergrpc::HandlerRequest,::handlergrpc::HandlerReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_sendRequestInsert<WithStreamedUnaryMethod_sendRequestGetByID<WithStreamedUnaryMethod_sendRequestLocation<WithStreamedUnaryMethod_sendRequestGetByArea<WithStreamedUnaryMethod_sendRequestDelete<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_sendRequestInsert<WithStreamedUnaryMethod_sendRequestGetByID<WithStreamedUnaryMethod_sendRequestLocation<WithStreamedUnaryMethod_sendRequestGetByArea<WithStreamedUnaryMethod_sendRequestDelete<Service > > > > > StreamedService;
};

}  // namespace handlergrpc


#endif  // GRPC_handlergrpc_2eproto__INCLUDED
