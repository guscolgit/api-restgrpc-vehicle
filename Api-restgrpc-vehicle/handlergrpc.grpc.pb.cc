// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: handlergrpc.proto

#include "handlergrpc.pb.h"
#include "handlergrpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace handlergrpc {

static const char* HandlerGRPC_method_names[] = {
  "/handlergrpc.HandlerGRPC/sendRequestInsert",
  "/handlergrpc.HandlerGRPC/sendRequestGetByID",
  "/handlergrpc.HandlerGRPC/sendRequestLocation",
  "/handlergrpc.HandlerGRPC/sendRequestGetByArea",
  "/handlergrpc.HandlerGRPC/sendRequestDelete",
};

std::unique_ptr< HandlerGRPC::Stub> HandlerGRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HandlerGRPC::Stub> stub(new HandlerGRPC::Stub(channel));
  return stub;
}

HandlerGRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_sendRequestInsert_(HandlerGRPC_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendRequestGetByID_(HandlerGRPC_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendRequestLocation_(HandlerGRPC_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendRequestGetByArea_(HandlerGRPC_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendRequestDelete_(HandlerGRPC_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HandlerGRPC::Stub::sendRequestInsert(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendRequestInsert_, context, request, response);
}

void HandlerGRPC::Stub::experimental_async::sendRequestInsert(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendRequestInsert_, context, request, response, std::move(f));
}

void HandlerGRPC::Stub::experimental_async::sendRequestInsert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendRequestInsert_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* HandlerGRPC::Stub::AsyncsendRequestInsertRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handlergrpc::HandlerReply>::Create(channel_.get(), cq, rpcmethod_sendRequestInsert_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* HandlerGRPC::Stub::PrepareAsyncsendRequestInsertRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handlergrpc::HandlerReply>::Create(channel_.get(), cq, rpcmethod_sendRequestInsert_, context, request, false);
}

::grpc::Status HandlerGRPC::Stub::sendRequestGetByID(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReplyGetByID* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendRequestGetByID_, context, request, response);
}

void HandlerGRPC::Stub::experimental_async::sendRequestGetByID(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendRequestGetByID_, context, request, response, std::move(f));
}

void HandlerGRPC::Stub::experimental_async::sendRequestGetByID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReplyGetByID* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendRequestGetByID_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByID>* HandlerGRPC::Stub::AsyncsendRequestGetByIDRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handlergrpc::HandlerReplyGetByID>::Create(channel_.get(), cq, rpcmethod_sendRequestGetByID_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByID>* HandlerGRPC::Stub::PrepareAsyncsendRequestGetByIDRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handlergrpc::HandlerReplyGetByID>::Create(channel_.get(), cq, rpcmethod_sendRequestGetByID_, context, request, false);
}

::grpc::Status HandlerGRPC::Stub::sendRequestLocation(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendRequestLocation_, context, request, response);
}

void HandlerGRPC::Stub::experimental_async::sendRequestLocation(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendRequestLocation_, context, request, response, std::move(f));
}

void HandlerGRPC::Stub::experimental_async::sendRequestLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendRequestLocation_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* HandlerGRPC::Stub::AsyncsendRequestLocationRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handlergrpc::HandlerReply>::Create(channel_.get(), cq, rpcmethod_sendRequestLocation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* HandlerGRPC::Stub::PrepareAsyncsendRequestLocationRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handlergrpc::HandlerReply>::Create(channel_.get(), cq, rpcmethod_sendRequestLocation_, context, request, false);
}

::grpc::Status HandlerGRPC::Stub::sendRequestGetByArea(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReplyGetByArea* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendRequestGetByArea_, context, request, response);
}

void HandlerGRPC::Stub::experimental_async::sendRequestGetByArea(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendRequestGetByArea_, context, request, response, std::move(f));
}

void HandlerGRPC::Stub::experimental_async::sendRequestGetByArea(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReplyGetByArea* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendRequestGetByArea_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByArea>* HandlerGRPC::Stub::AsyncsendRequestGetByAreaRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handlergrpc::HandlerReplyGetByArea>::Create(channel_.get(), cq, rpcmethod_sendRequestGetByArea_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReplyGetByArea>* HandlerGRPC::Stub::PrepareAsyncsendRequestGetByAreaRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handlergrpc::HandlerReplyGetByArea>::Create(channel_.get(), cq, rpcmethod_sendRequestGetByArea_, context, request, false);
}

::grpc::Status HandlerGRPC::Stub::sendRequestDelete(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::handlergrpc::HandlerReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendRequestDelete_, context, request, response);
}

void HandlerGRPC::Stub::experimental_async::sendRequestDelete(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendRequestDelete_, context, request, response, std::move(f));
}

void HandlerGRPC::Stub::experimental_async::sendRequestDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handlergrpc::HandlerReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendRequestDelete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* HandlerGRPC::Stub::AsyncsendRequestDeleteRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handlergrpc::HandlerReply>::Create(channel_.get(), cq, rpcmethod_sendRequestDelete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handlergrpc::HandlerReply>* HandlerGRPC::Stub::PrepareAsyncsendRequestDeleteRaw(::grpc::ClientContext* context, const ::handlergrpc::HandlerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handlergrpc::HandlerReply>::Create(channel_.get(), cq, rpcmethod_sendRequestDelete_, context, request, false);
}

HandlerGRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HandlerGRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HandlerGRPC::Service, ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReply>(
          std::mem_fn(&HandlerGRPC::Service::sendRequestInsert), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HandlerGRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HandlerGRPC::Service, ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReplyGetByID>(
          std::mem_fn(&HandlerGRPC::Service::sendRequestGetByID), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HandlerGRPC_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HandlerGRPC::Service, ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReply>(
          std::mem_fn(&HandlerGRPC::Service::sendRequestLocation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HandlerGRPC_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HandlerGRPC::Service, ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReplyGetByArea>(
          std::mem_fn(&HandlerGRPC::Service::sendRequestGetByArea), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HandlerGRPC_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HandlerGRPC::Service, ::handlergrpc::HandlerRequest, ::handlergrpc::HandlerReply>(
          std::mem_fn(&HandlerGRPC::Service::sendRequestDelete), this)));
}

HandlerGRPC::Service::~Service() {
}

::grpc::Status HandlerGRPC::Service::sendRequestInsert(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HandlerGRPC::Service::sendRequestGetByID(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HandlerGRPC::Service::sendRequestLocation(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HandlerGRPC::Service::sendRequestGetByArea(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReplyGetByArea* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HandlerGRPC::Service::sendRequestDelete(::grpc::ServerContext* context, const ::handlergrpc::HandlerRequest* request, ::handlergrpc::HandlerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace handlergrpc

